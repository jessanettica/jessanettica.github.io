---
layout: post
title:  "Recreando Pinterest con Gatos"
date:   2017-07-19 08:20:13 -0800
tags: code
image_sliders:
  - slider10
style: |
  .post-title {
    font-family: 'Playfair Display', serif;
    font-size: 45px;
  }
  .post-content p {
    font-family: 'Pontano Sans', sans-serif;
    font-size: 20px;
  }
  pre, code {
    background-color: #ffd7d7;
  }
photos: ["/img/party_frenchie.jpg", "/img/rainbow_cake.jpg", "/img/dog_at_party.jpg"]
---

{% include slider.html selector="slider10" %}

No estoy segura si Pinterest fue el primer sitio web que populariz√≥ el dise√±o de una cuadr√≠cula de im√°genes en cascada, pero ahora lo veo en todas partes. Si nunca has utilizado Pinterest, es un sitio donde puedes guardar colecciones de im√°genes que se organizan en una cuadr√≠cula.

Hay un par de librer√≠as a tu disposici√≥n para crear un dise√±o de cuadr√≠cula que se encargaran del posicionamiento para ti (como [Masonry][masonry]), pero la implementaci√≥n de un dise√±o como el de Pinterest no es tan dificil. ¬°Puedes hacerlo tu misma!

Voy a usar jQuery para explicar c√≥mo hacerlo, pero tu puedes usar lo que quieras. Lo que importa es la matem√°tica detr√°s del posicionamiento, no la biblioteca que utilices. Te dar√© una explicaci√≥n general y luego podremos entrar en los detalles de implementaci√≥n con c√≥digo.

Aqu√≠ va la explicaci√≥n general. Los ‚Äúpins‚Äù se muestran en la p√°gina inicialmente con AJAX. Despu√©s de asignar lo ancho de la columna y el margen entre las columnas, puedes utilizar lo ancho de la ventana para calcular el n√∫mero de columnas que caben en la p√°gina. Utiliza una lista para guardar la altura de cada columna y la longitud de la lista es cu√°ntas columnas hay. Por ejemplo, `misColumnas = [300, 340, 370]` significa que hay 3 columnas en la p√°gina. La altura de la primera columna es de 300, la altura de la segunda columna es de 340 y la altura de la tercer columna es de 370. Cool, ¬øno? As√≠ que cuando cada pin se agrega a la p√°gina, se agrega a la columna m√°s corta y la matriz se actualiza con la nueva altura de la columna. La posici√≥n izquierda y superior de cada uno de los ‚Äúpins‚Äù, los cuales tienen una posici√≥n absoluta, se determina usando estos valores de altura (ve `getTopPosition ()` y `getLeftPosition ()` a continuaci√≥n).

¬°Eso es! Probablemente es un poco confuso leer s√≥lo esa explicaci√≥n, as√≠ que echemos un vistazo al c√≥digo para ver c√≥mo se implementa. A√±adi comentarios con n√∫meros para que puedas leer el archivo en el orden en que suceden las cosas que mencione en la explicaci√≥n anterior. Los nombres de las variables y el resto del codigo lo voy a dejar en ingl√©s, pero todos mis comentarios explicando lo que est√° pasando en el c√≥digo est√°n en espanol:

{% highlight javascript %}
function makeArray(len, value) {
  return new Array(len).fill(value);
}

function getShortestColumnIndex(colArray) {
  // Regresa qu√© columna es la m√°s corta para que
  // sepamos d√≥nde colocar el siguiente pin
  return colArray.indexOf(Math.min(...colArray));
}

function getLeftPosition(colIndex, numColumns) {
  // Calcula la posici√≥n izquierda del pin tomando
  // en cuenta su anchura y en qu√© columna est√°
  var gutter = 12;
  var pinWidth = 236;
  if (colIndex == 0){
    return gutter;
  }else{
    return gutter * (colIndex + 1) + pinWidth * colIndex;
  }
}

function getTopPosition(colIndex, colArray){
    // Obten la posici√≥n de la parte superior del pin usando
    // la altura de la columna en la que se colocar√°
    // usando la lista que tenemos
    return colArray[colIndex];
}

function updateColArray(colIndex, colArray, pinHeight){
  // actualiza la lista que representa las columnas agregando la altura del pin
  // m√°s el espacio vertical que queremos entre los pins
  colArray[colIndex] += (pinHeight + 120);
  return colArray;
}
var screenWidth = $(window).width();
var gutter = 12;
var numColumns = Math.floor(screenWidth / (236 + gutter));
// 2. Haz una lista para representar las columnas y
// inicializa la altura de todas las columnas en la p√°gina a cero
var colArray = makeArray(numColumns, 0);

function renderPins(resp){
  // 3. Crea elementos de DOM de los datos de la respuesta
  Object.values(resp["data"]).map(function(v) {
      return $(`<div data-height="${v.img_height}" style="padding:15px;position:absolute;">
        <img style="border-radius:10px;" width=236 src="${v.img_url}">
        <div style="min-height:13px;width: 236px;position:relative;padding-left:8px;padding-right:8px;">
            <div style="position:relative;max-width:145px;">
                <p style="max-width: 180px;margin-top:0;padding:0;max-height:60px;overflow:hidden;text-overflow:ellipsis;">${v.description}
                </p>
            </div>
            <div style="position:absolute;right:0;top:1px;z-index:3;">
                <p style="color:#a7a7a7">${v.repin_count} repins
                </p>
            </div>
        </div>
        <div style="display:flex;position:relative;-webkit-box-align:center;padding-left:8px;padding-right:8px;margin-top:4px;"
        >
            <div style="padding:0;display:flex;">
                <a href="pinterest.com/${v.pinner.username}" page style="-webkit-box-align: center;text-decoration:none">
                    <div style="height:24px;width:24px;margin-right:8px;">
                        <img src="${v.pinner.img_url}" style="height:24px;width:24px;border-radius:50%;position:static;">
                    </div>
                    <div>
                        <div style="display:block;overflow:hidden; text-overflow:ellipsis;">
                    ${v.pinner.username}</div>
                        <div style="display:block;overflow:hidden; text-overflow:ellipsis;">
                    ${v.boards.name}</div>
                    </div>
                </a>
             </div>
        </div>
      </div>`)
  }).forEach(function(v) {
      // Obten la altura de cada pin
      var imageHeight = v.data("height");
      var pinHeight = imageHeight + 24 + 24;
      // 4. Obten el √≠ndice de la columna m√°s corta. La columna m√°s corta
      // es donde se colocar√° el siguiente pin.
      var columnIdx = getShortestColumnIndex(colArray);
      var left = getLeftPosition(columnIdx, numColumns);
      var top = getTopPosition(columnIdx, colArray);
      // 5. Actualiza la lista que representa nuestras columnas para que
      // podemos continuar poniendo los siguientes "pins" en
      // la columna m√°s corta
      colArray = updateColArray(columnIdx, colArray, pinHeight);
      // 6. A√±ade la posici√≥n al pin
      v.css("top", top.toString() + "px");
      v.css("left", left.toString() + "px");
      v.css("width", "236px");
      v.css("height", "100%");
      // 7. A√±ade el pin a la p√°gina
      $('#pin-container').append(v);
  });
}
function fetchAllInitialPins(){
  $.ajax({
      url: '/pins/get_all_pins/',
      type: 'POST',
      data: {},
      success: function(resp) {
          if (resp.status == 'ok'){
              renderPins(resp);
          }
      }
   });
}

window.onload = function () {
  // 1. Llama a las funciones al cargarse la p√°gina
  fetchAllInitialPins();
};

{% endhighlight %}

Si quieres ver la implementaci√≥n del proyecto entero esta [aqu√≠][recreando-pinterest].

Jessica üëã

[masonry]: https://masonry.desandro.com/
[recreando-pinterest]: https://github.com/jessanettica/Recreate-Pinterest-with-cats
