---
layout: post
title:  "Elevaci√≥n de las variables"
date:   2017-04-15 07:22:28 -0800
categories: javascript
image_sliders:
  - slider6
style: |
  .post-title {
    font-family: 'Playfair Display', serif;
    font-size: 45px;
  }
  .post-content p {
    font-family: 'Pontano Sans', sans-serif;
    font-size: 20px;
  }
  pre, code {
    background-color: #ffd7d7;
  }
---

{% include slider.html selector="slider6" %}

Es super tentador ver c√≥digo escrito en JavaScript y asumir que ejecuta de arriba a abajo. Eso es por la mayor parte correcto, pero no lo es siempre. Ese "por la mayor parte" puede resultar en confusos e inesperados resultados en tu programa. Es f√°cil ignorar estas inconsistencias en c√≥digo en JavaScript y pensar que se deben a la flexibilidad del lenguaje, pero en realidad est√°n pasando algunas cosas interesantes. Una orden de ejecuci√≥n inesperada en tu programa probablemente se debe a algo llamado "hoisting" o elevaci√≥n de las variables.

{% highlight javascript %}
cosa = 4;
var cosa;
console.log( cosa );
{% endhighlight %}

Que piensas que eso va a imprimir?

La mayor√≠a de las personas dir√≠a `undefined` pero el programa va a imprimir `4`. Porque?

Porque JavaScript separa `var case = 4` en `var cosa` y `cosa=4`. As√≠ que piensa en el en orden en que se lee el programa as√≠:
{% highlight javascript %}
var cosa;
cosa = 4;
console.log(cosa);
{% endhighlight %}

Que tal aqui:

{% highlight javascript %}
console.log(cosa);
var cosa = 4;
{% endhighlight %}

`4`? No. Va a imprimir `undefined`. La ejecuci√≥n ocurre en este orden:

{% highlight javascript %}
var cosa;
console.log(cosa);
cosa = 4;
{% endhighlight %}

Las declaraciones de variables y funciones son elevadas desde donde est√°n hasta lo m√°s alto de su contexto. Esto es importante. La elevaci√≥n de variables es por contexto. Entonces, si el c√≥digo en los ejemplos que acabamos de ver estuviera dentro de una funci√≥n, las variables ser√≠an elevadas hasta lo m√°s alto de el cuerpo de la function, pero no ser√≠an elevadas hasta lo m√°s alto del archivo donde escribiste tu programa. Tambi√©n es importante tener en cuenta que solo las declaraciones de variables son elevadas, pero la demas l√≥gica se queda donde est√°. Si la elevaci√≥n de variables cambiar√° el orden de todo ser√≠a un caos absoluto y todos nos estuvi√©ramos tirando el cabello.

Bueno, ahora que ya hablamos de las variables hablemos de las funciones. Las declaraciones de funciones son elevadas, pero las expresiones de funciones no.

{% highlight javascript %}
diHola();
function diHola() {
    console.log( saludo ); // undefined
    var saludo = "hi";
}
{% endhighlight %}

Ese codigo ya a ejecutar en esta orden:

{% highlight javascript %}
function diHola() {
    var saludo;
    console.log( saludo ); // undefined porque todav√≠a no le hemos dado un valor
    saludo = "hi";
}
diHola();
{% endhighlight %}

Pero mira lo que pasa cuando es una expresi√≥n de funci√≥n y no una declaraci√≥n:

{% highlight javascript %}
diHola(); // resulta en un TypeError
var diHola = function printSaludo() {
    // ...
};
{% endhighlight %}

`diHola` es elevada y atada a el contexto exterior(probablemente aqu√≠ se trata de el contexto global), entonces `diHola` no causa un `ReferenceError`. Pero `diHola` todavia no tiene ning√∫n valor, por eso cuando llamas la funcion `diHola()`, esta llamando un valor indefinido y resulta en un `TypeError`.

Que tal si tienes funciones y variables? Cual se eleva primero? Funciones son elevadas primero, y variables despu√©s.

{% highlight javascript %}
diHola();
var diHola;
function diHola() {
    console.log( "hola" );
}
diHola = function() {
    console.log( "como estas?" );
};
{% endhighlight %}

Este codigo imprime "hola". Esto es lo que pas√≥:

{% highlight javascript %}
function diHola() {
    console.log( "hola");
}
diHola(); // imprime ‚Äúhola‚Äù
diHola = function() {
    console.log( "como estas?" );
};
{% endhighlight %}

`var diHola` fue ignorada a pesar de estar escrito antes de function `diHola()` porque las declaraciones de funciones son elevadas antes de las variables normales.

Pero cuidado porque aunque declaraciones duplicadas de `var` como las de arriba son b√°sicamente ignoradas, declaraciones de funciones si se anulan la una a la otra. Mira esta pesadilla:

{% highlight javascript %}
diHola();
function diHola() {
    console.log( "hi");
}
var diHola = function() {
    console.log( "hello there" );
};
function diHola() {
    console.log( "Esto se imprime porque anula la declaraci√≥n previa de la funci√≥n" );
}
{% endhighlight %}

Que se imprime?

"Esto se imprime porque anula la declaraci√≥n previa de la funci√≥n"

B√°sicamente, hazte un favor y no hagas dupliques de funciones en el mismo contexto. Espero que esto te ayude y te ahorre un dolor de cabeza :)

üëã
